subprojects {
	apply plugin: 'java'

	compileJava.options.encoding = 'UTF-8'

	clean {
		delete += fileTree( '../target' ).include( '**/*' )
	}

	plugins.withType(JavaPlugin).configureEach {
		java {
			modularity.inferModulePath = true
			sourceCompatibility = JavaVersion.VERSION_21
			targetCompatibility = JavaVersion.VERSION_21
		}
	}
}

project( ':MalletEngine' ) {
	sourceSets {
		main {
			java {
				srcDirs '../../src'
				srcDirs '../src'

				exclude '**/web/**'
				exclude '**/android/**'
				exclude '**/malleteditor/**'
			}
		}
	}

	dependencies {
		implementation fileTree( dir: 'dependencies/libs', include: ['*.jar'] )
	}

	clean {
		delete += fileTree( '../../TemplateProject/desktop' ).include( '**/*' )
	}

	compileJava {
		doFirst {
			options.compilerArgs += [
					'--module-path', classpath.asPath
			]
			classpath = files()
		}
	}

	tasks.withType( JavaCompile ) {
		//options.compilerArgs << '-Xlint:unchecked'
		options.deprecation = true
	}

	task copy(dependsOn: [':copy', 'jar'], type: Copy) {
		into '.'
		from( 'dependencies' ) {
			into '../target'
		}
		from( 'build/libs' )
		{
			into '../target/libs'
		}
		from( '../target/libs' ) {
			into( '../../TemplateProject/desktop/libs' )
		}
	}
}

project( ':MalletEditor' ) {
	sourceSets {
		main {
			java {
				srcDir '../../src'
				exclude '**/web/**'
				exclude '**/android/**'
				exclude '**/mallet/**'
			}
		}
	}

	tasks.withType( JavaCompile ) {
		options.compilerArgs << '-Xlint:unchecked'
		options.deprecation = true
	}

	dependencies {
		implementation project(':MalletEngine')
	}
	
	task copy(dependsOn: [':copy', 'jar'], type: Copy) {
		into '.'
		from( 'build/libs' )
		{
			into '../target/libs'
		}
	}
}


task copy(type: Copy) {
	into '.'
	from( '../resources' ) {
		include('run')
		include('run-debug')
		include('run-editor')
		include('run.bat')
		into( 'target' )
	}
	from( '../resources/base/shaders' ) {
		into( '../TemplateProject/resources/base/shaders' )
	}
	from( '../resources/base/config.cfg' ) {
		into( '../TemplateProject/resources/base' )
	}
}

task zip(type: Zip) {
	archiveFileName = "resources.zip"
	destinationDirectory = file("target/base")
	from "../resources/base"
}
